{"remainingRequest":"/home/tmst/an3sem2/sd/final-project-luaRRaul/stockhelt/frontend/node_modules/babel-loader/lib/index.js!/home/tmst/an3sem2/sd/final-project-luaRRaul/stockhelt/frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/tmst/an3sem2/sd/final-project-luaRRaul/stockhelt/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/tmst/an3sem2/sd/final-project-luaRRaul/stockhelt/frontend/src/components/DoctorTextDialog.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/tmst/an3sem2/sd/final-project-luaRRaul/stockhelt/frontend/src/components/DoctorTextDialog.vue","mtime":1622559851642},{"path":"/home/tmst/an3sem2/sd/final-project-luaRRaul/stockhelt/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/tmst/an3sem2/sd/final-project-luaRRaul/stockhelt/frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/tmst/an3sem2/sd/final-project-luaRRaul/stockhelt/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/tmst/an3sem2/sd/final-project-luaRRaul/stockhelt/frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9ob21lL3Rtc3QvYW4zc2VtMi9zZC9maW5hbC1wcm9qZWN0LWx1YVJSYXVsL3N0b2NraGVsdC9mcm9udGVuZC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvciI7CmltcG9ydCAicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIjsKLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KaW1wb3J0IFNvY2tKUyBmcm9tICJzb2NranMtY2xpZW50IjsKaW1wb3J0IFN0b21wIGZyb20gIndlYnN0b21wLWNsaWVudCI7CmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAiRG9jdG9yVGV4dERpYWxvZyIsCiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIHNlbmRfbWVzc2FnZTogbnVsbCwKICAgICAgY29ubmVjdGVkOiBmYWxzZSAvLyByb2xlczogWyJTZWNyZXRhcnkiLCAiRG9jdG9yIiwgIkFkbWluIl0sCgogICAgfTsKICB9LAogIHByb3BzOiB7CiAgICBwYXRpZW50OiBPYmplY3QsCiAgICBvcGVuZWQ6IEJvb2xlYW4KICB9LAogIG1ldGhvZHM6IHsKICAgIHNlbmQ6IGZ1bmN0aW9uIHNlbmQoKSB7CiAgICAgIGNvbnNvbGUubG9nKCJTZW5kIG1lc3NhZ2U6IiArIHRoaXMuc2VuZF9tZXNzYWdlKTsKCiAgICAgIGlmICh0aGlzLnN0b21wQ2xpZW50ICYmIHRoaXMuc3RvbXBDbGllbnQuY29ubmVjdGVkKSB7CiAgICAgICAgdGhpcy5zZW5kX21lc3NhZ2UgPSB7CiAgICAgICAgICB0eXBlOiAiTVNHIiwKICAgICAgICAgIGNvbnRlbnQ6ICJIZWxsb3cgV29ybGQhIiwKICAgICAgICAgIHNlbmRlcjogdGhpcy4kc3RvcmUuc3RhdGUuYXV0aC51c2VyLmlkCiAgICAgICAgfTsKICAgICAgICBjb25zb2xlLmxvZyhKU09OLnN0cmluZ2lmeSh0aGlzLnNlbmRfbWVzc2FnZSkpOwogICAgICAgIHRoaXMuc3RvbXBDbGllbnQuc2VuZCgiL2FwaS9jaGF0L3RvcGljLyIgKyB0aGlzLnBhdGllbnQuaWQsIEpTT04uc3RyaW5naWZ5KHRoaXMuc2VuZF9tZXNzYWdlKSwge30pOwogICAgICB9CiAgICB9LAogICAgY29ubmVjdDogZnVuY3Rpb24gY29ubmVjdCgpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHRoaXMuc29ja2V0ID0gbmV3IFNvY2tKUygiaHR0cDovL2xvY2FsaG9zdDo4MDg4L2FwaS9teS13ZWJzb2NrZXQiKTsKICAgICAgdGhpcy5zdG9tcENsaWVudCA9IFN0b21wLm92ZXIodGhpcy5zb2NrZXQpOwogICAgICB0aGlzLnN0b21wQ2xpZW50LmNvbm5lY3Qoe30sIGZ1bmN0aW9uIChmcmFtZSkgewogICAgICAgIF90aGlzLmNvbm5lY3RlZCA9IHRydWU7CiAgICAgICAgY29uc29sZS5sb2coZnJhbWUpOwoKICAgICAgICBfdGhpcy5zdG9tcENsaWVudC5zdWJzY3JpYmUoIi9hcGkvdG9waWMvbWVzc2FnZXMvIiArIF90aGlzLiRzdG9yZS5zdGF0ZS5hdXRoLnVzZXIuaWQsIGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgICAgY29uc29sZS5sb2cocmVzcG9uc2UpOwogICAgICAgICAgdmFyIGRhdGEgPSBKU09OLnBhcnNlKHJlc3BvbnNlLmJvZHkpOwogICAgICAgICAgY29uc29sZS5sb2coZGF0YSk7CiAgICAgICAgfSk7CiAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikgewogICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTsKICAgICAgICBfdGhpcy5jb25uZWN0ZWQgPSBmYWxzZTsKICAgICAgfSk7CiAgICB9CiAgfSwKICBjb21wdXRlZDogewogICAgaXNOZXc6IGZ1bmN0aW9uIGlzTmV3KCkgewogICAgICByZXR1cm4gIXRoaXMucGF0aWVudC5pZDsKICAgIH0KICB9LAogIHdhdGNoOiB7CiAgICBvcGVuZWQ6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9vcGVuZWQgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUobmV3VmFsLCBvbGRWYWwpIHsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBpZiAobmV3VmFsICYmICFvbGRWYWwpIHsKICAgICAgICAgICAgICAgICAgdGhpcy5jb25uZWN0KCk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIGNhc2UgMToKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUsIHRoaXMpOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiBvcGVuZWQoX3gsIF94MikgewogICAgICAgIHJldHVybiBfb3BlbmVkLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBvcGVuZWQ7CiAgICB9KCkKICB9Cn07"},{"version":3,"sources":["DoctorTextDialog.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAiBA,OAAA,MAAA,MAAA,eAAA;AACA,OAAA,KAAA,MAAA,iBAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,kBADA;AAEA,EAAA,IAFA,kBAEA;AACA,WAAA;AACA,MAAA,YAAA,EAAA,IADA;AAEA,MAAA,SAAA,EAAA,KAFA,CAGA;;AAHA,KAAA;AAKA,GARA;AASA,EAAA,KAAA,EAAA;AACA,IAAA,OAAA,EAAA,MADA;AAEA,IAAA,MAAA,EAAA;AAFA,GATA;AAaA,EAAA,OAAA,EAAA;AACA,IAAA,IADA,kBACA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,kBAAA,KAAA,YAAA;;AACA,UAAA,KAAA,WAAA,IAAA,KAAA,WAAA,CAAA,SAAA,EAAA;AACA,aAAA,YAAA,GAAA;AACA,UAAA,IAAA,EAAA,KADA;AAEA,UAAA,OAAA,EAAA,eAFA;AAGA,UAAA,MAAA,EAAA,KAAA,MAAA,CAAA,KAAA,CAAA,IAAA,CAAA,IAAA,CAAA;AAHA,SAAA;AAKA,QAAA,OAAA,CAAA,GAAA,CAAA,IAAA,CAAA,SAAA,CAAA,KAAA,YAAA,CAAA;AACA,aAAA,WAAA,CAAA,IAAA,CAAA,qBAAA,KAAA,OAAA,CAAA,EAAA,EAAA,IAAA,CAAA,SAAA,CAAA,KAAA,YAAA,CAAA,EAAA,EAAA;AACA;AACA,KAZA;AAaA,IAAA,OAbA,qBAaA;AAAA;;AACA,WAAA,MAAA,GAAA,IAAA,MAAA,CAAA,wCAAA,CAAA;AACA,WAAA,WAAA,GAAA,KAAA,CAAA,IAAA,CAAA,KAAA,MAAA,CAAA;AACA,WAAA,WAAA,CAAA,OAAA,CACA,EADA,EAEA,UAAA,KAAA,EAAA;AACA,QAAA,KAAA,CAAA,SAAA,GAAA,IAAA;AACA,QAAA,OAAA,CAAA,GAAA,CAAA,KAAA;;AACA,QAAA,KAAA,CAAA,WAAA,CAAA,SAAA,CAAA,yBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,CAAA,IAAA,CAAA,IAAA,CAAA,EAAA,EAAA,UAAA,QAAA,EAAA;AACA,UAAA,OAAA,CAAA,GAAA,CAAA,QAAA;AACA,cAAA,IAAA,GAAA,IAAA,CAAA,KAAA,CAAA,QAAA,CAAA,IAAA,CAAA;AACA,UAAA,OAAA,CAAA,GAAA,CAAA,IAAA;AACA,SAJA;AAKA,OAVA,EAWA,UAAA,KAAA,EAAA;AACA,QAAA,OAAA,CAAA,GAAA,CAAA,KAAA;AACA,QAAA,KAAA,CAAA,SAAA,GAAA,KAAA;AACA,OAdA;AAgBA;AAhCA,GAbA;AA+CA,EAAA,QAAA,EAAA;AACA,IAAA,KAAA,EAAA,iBAAA;AACA,aAAA,CAAA,KAAA,OAAA,CAAA,EAAA;AACA;AAHA,GA/CA;AAoDA,EAAA,KAAA,EAAA;AACA,IAAA,MAAA;AAAA,4EAAA,iBAAA,MAAA,EAAA,MAAA;AAAA;AAAA;AAAA;AAAA;AACA,oBAAA,MAAA,IAAA,CAAA,MAAA,EAAA;AACA,uBAAA,OAAA;AACA;;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AADA;AApDA,CAAA","sourcesContent":["<template>\n  <v-dialog\n      transition=\"dialog-bottom-transition\"\n      max-width=\"600\"\n      :value=\"opened\"\n  >\n    <template>\n      <v-card>\n          <v-btn @click=\"send\">\n            Send\n          </v-btn>\n      </v-card>\n    </template>\n  </v-dialog>\n</template>\n\n<script>\nimport SockJS from \"sockjs-client\";\nimport Stomp from \"webstomp-client\";\n\nexport default {\n  name: \"DoctorTextDialog\",\n  data(){\n    return {\n      send_message: null,\n      connected: false,\n      // roles: [\"Secretary\", \"Doctor\", \"Admin\"],\n    }\n  },\n  props: {\n    patient: Object,\n    opened: Boolean,\n  },\n  methods: {\n    send() {\n      console.log(\"Send message:\" + this.send_message);\n      if (this.stompClient && this.stompClient.connected) {\n        this.send_message = {\n          type : \"MSG\",\n          content: \"Hellow World!\",\n          sender: this.$store.state.auth.user.id\n        };\n        console.log(JSON.stringify(this.send_message));\n        this.stompClient.send(\"/api/chat/topic/\"+this.patient.id, JSON.stringify(this.send_message),{});\n      }\n    },\n    connect() {\n      this.socket = new SockJS(\"http://localhost:8088/api/my-websocket\");\n      this.stompClient = Stomp.over(this.socket);\n      this.stompClient.connect(\n          {},\n          frame => {\n            this.connected = true;\n            console.log(frame);\n            this.stompClient.subscribe(\"/api/topic/messages/\"+this.$store.state.auth.user.id,function (response){\n              console.log(response);\n              let data = JSON.parse(response.body);\n              console.log(data);\n            });\n          },\n          error => {\n            console.log(error);\n            this.connected = false;\n          }\n      );\n    },\n  },\n  computed: {\n    isNew: function () {\n      return !this.patient.id;\n    },\n  },\n  watch:{\n    opened: async function (newVal, oldVal) {\n      if (newVal && !oldVal) {\n        this.connect();\n      }\n    }\n  },\n};\n</script>\n\n<style scoped></style>\n"],"sourceRoot":"src/components"}]}